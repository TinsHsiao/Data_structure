任務一 :
在Add函式裡使用遞迴去新增節點與資料
如果是依據畢業人數去做排序的話: 
當目前資料的畢業人數比下一筆要進來的資料的畢業人數大時，就會呼叫自身函式傳入目前節點的左邊指向，使資料放到此節點的左邊再利用遞回去找下一個方向，直到目前的節點無下一個節點時(base case)，就將資料放入；當目前資料的畢業人數小於等於下一筆資料的畢業人數，就呼叫自身函式傳入目前節點的右邊指向，使資料放置到目前節點的右邊再遞迴去找下一個方向，直到無下一節點(base case)就會將資料放進。

如果是依據學校名稱:
利用string裡的compare函式去比較名稱的大小，當目前資料的學校名稱比下一筆要進來的資料的學校名稱大時，就會呼叫自身函式傳入目前節點的左邊指向，使資料放到此節點的左邊再利用遞回去找下一個方向，直到目前的節點無下一個節點時(base case)，就將資料放入；當目前資料的學校名稱小於等於下一筆資料的學校名稱，就呼叫自身函式傳入目前節點的右邊指向，使資料放置到目前節點的右邊再遞迴去找下一個方向，直到無下一節點(base case)就會將資料放進。

任務二:
呼叫SearchByG從以畢業人數為根據建立好的二元樹中找大於等於使用者輸入的值的資料印出。
當目前節點大於等於輸入進來的值時，先將found設為true並把目前節點的資料印出，當目前節點的右邊不指向NULL的時候，呼叫遞迴傳入參數為目前節點的左邊指向用以往左邊的分支尋找，遞迴結束後呼叫preOrderPrint傳入參數為目前節點的右邊指向(因為原目前節點若大於等於使用這輸入，右邊分支都會大於使用者輸入)。
如果小於時，就呼叫自身函數傳入參數為目前節點的右邊指向，繼續向右分支尋找。

呼叫SearchByName從以學校名稱為根據建立的二元樹中找與使用者輸入的學校名稱相同的資料。
當此節點指向NULL(base case)，輸出無符合的。

當目前節點資料中的學校名稱與使用者輸入的名稱相同時(base case)，先設定一個TreeList型別的walk指向head，利用迴圈當walk不為NULL且學校名稱與使用者輸入相同時就輸出此筆資料，然後繼續往右分支找。
如果目前節點資料中的學校名稱與使用者輸入的名稱相比較小時，就呼叫自身函數往右找。
如果目前節點資料中的學校名稱與使用者輸入的名稱相比較大時，就呼叫自身函數往左找。

任務三：
先讀入一個數字，然後用這個數字去呼叫deleteG找不超過這個數字的資料，根據這筆要刪掉的左右分支情況去處理刪除之後二元樹應該要怎麼樣補位，如果左右都沒分支就直接刪除此節點，如果只有一邊有分支，就把分支接上去，不然就找到右邊分支的最小子孫，把他的資料複製給要刪掉的節點，再把最小子孫刪掉。在刪的時候先把要刪除的資料放進一個vector裡，根據這個vector的東西去處理另外一棵樹的資料。


心得：
連翊安：任務三寫的時候沒有想到，刪除的順序也會影響到樹高，一直覺得是自己刪節點的時候沒有處理好，才影響到樹高，在樹高卡了很久。
蕭合亭 : 任務一、二都可以思考清楚是怎麼實現，寫的時候也可以更熟悉遞迴的使用與二元樹的概念，任務三真的很難想通，一開始就卡住不知道自己寫的方式哪裡出問題，跟組員討論後才得到解決辦法。