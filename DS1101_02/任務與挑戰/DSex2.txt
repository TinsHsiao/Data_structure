本次作業:尋找目標
任務一, 任務二的差別在於目標數量的不同,主要運作的function相同
修改目標數量即可

任務一、任務二想法 :
  找V:
    由同一個方向走到不能走的時候( 碰到牆壁 or 超出陣列範圍 )，就變換方向 
    ex:方向向右走，會先判斷右邊是否可走，不行就判斷下面，下面也不行就看上面
    都不行，就回到上一層判斷，左邊不用判斷因為那是它來的方向,以此類推。
    直到找到目標數量的G。為了不要找到重複的G，所以在找到G之後要把它改成T。
	
	
找R: 
    與找V差不多，但因為在任務一的時候E已經被改成V，所以判斷條件由E改成V
    跟找V不同的是，需要判斷分支，因為不一定每個分支都能夠找到G，所以當現在這個點，
    有分支的時候利用stack存起來，為了避免G本身也是一個分支點，但並無法走到另
    外一個G的路，所以如果已經找到一個G之後，且回到分支點附近就要把條件設成false
    當分支點的所有岔路都走過了就把分支點刪掉，一樣也是做到找到目標數量的G。
	

任務三:
  先將地圖中的所有G找出來，並將座標存起來，去找每一個G的最短路徑，如果有比當前
  段路徑還短的就把原先存的地圖、步數及G的座標覆蓋，將所有G都找完之後就會得到最
  短路徑的R地圖，找到R之後再去做，再找到最短路徑前會經過的路(V)
  如果地圖沒有東西就代表這個迷宮找不到G就單純去做找V的就好。
		
		
		
心得:

蕭合亭
一開始把程式想得很簡單，到後面的數據就發現會有很多問題，為了考慮程式的完整性，利用了很多判斷式去解決每一種問題，也把分支的判斷加了進去，
也在這次練習中學到了新的東西，這次的練習跟上機，都很具挑戰性，讓我知道自己的不足。

連翊安
在反覆檢查的過程中，其實發現自己的程式還是有很多不夠完善的地方，或許應該要再思考的更周全一些，但因為時間的關係，沒有辦法把它做到非常好，
如果之後有時間會再把它做好。在這次的練習當中，對遞迴的概念又更加的深刻了